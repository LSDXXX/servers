// Code generated by handlergen DO NOT EDIT.
// Code generated by handlergen DO NOT EDIT.
// Code generated by handlergen DO NOT EDIT.

package conversation

import (
	"github.com/gin-gonic/gin"
	"github.com/pkg/errors"

	"context"

	"github.com/LSDXXX/libs/api"
	"github.com/LSDXXX/libs/model"
	"github.com/LSDXXX/libs/pkg/container"
	"github.com/LSDXXX/libs/pkg/errorcode"
	"github.com/LSDXXX/libs/service"
	"github.com/LSDXXX/servers/chatgpt/bot"
)

func Register(mid ...func(*gin.Context)) {
	api.RegisterHttpRouter(NewConversationHandlerWrapper(mid))
}

type ConversationHandlerWrapper struct {
	handler     *ConversationHandlerImp
	rootPath    string
	middleWares []func(*gin.Context)
}

func NewConversationHandlerWrapper(mid []func(*gin.Context)) *ConversationHandlerWrapper {
	out := &ConversationHandlerWrapper{
		rootPath:    "/api",
		handler:     NewConversationHandlerImp(),
		middleWares: mid,
	}
	err := container.Fill(out)
	if err != nil {
		panic(err)
	}
	return out
}

func (w *ConversationHandlerWrapper) Use(e *gin.Engine) {

	e.POST(w.rootPath+"/ask", w.Ask)
}

type ConversationHandlerImp struct {
	Chatbot      *bot.Chatbot          `container:"type"`
	Conversation *service.Conversation `container:"type"`
	ctx          context.Context
}

func NewConversationHandlerImp() *ConversationHandlerImp {
	out := &ConversationHandlerImp{
		ctx: context.Background(),
	}
	err := container.Fill(out)
	if err != nil {
		panic(err)
	}
	return out
}

func (imp *ConversationHandlerImp) WithContext(ctx context.Context) *ConversationHandlerImp {
	out := *imp

	out.Chatbot = imp.Chatbot.WithContext(ctx)
	out.Conversation = imp.Conversation.WithContext(ctx)
	out.ctx = ctx
	return &out
}

func (w *ConversationHandlerWrapper) Ask(c *gin.Context) {
	for _, mid := range w.middleWares {
		mid(c)
		if c.IsAborted() {
			return
		}
	}

	var _tmp string
	_ = _tmp
	var err error

	var req AskReq

	if err = c.ShouldBindJSON(&req); err != nil {
		c.JSON(200,
			model.NewResponse(model.WithError(errors.Wrap(errorcode.ErrParameterInvalid, err.Error()))))
		return
	}

	ctx := c.Request.Context()
	handler := w.handler.WithContext(ctx)
	res, err := handler.Ask(req)
	if err != nil {
		c.JSON(200,
			model.NewResponse(model.WithError(err)))
		return
	}
	c.JSON(200, model.NewResponse(model.WithData(res)))
}
